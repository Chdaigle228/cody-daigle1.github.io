////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, num){ 

  let arr = [];
  if(start === end){
  return arr;
  } if(num !== undefined){
   if(num < 0){
    return arr;
   }
     for (var i = start; i <= end; i += num)
        arr.push(i);
    } else {
      for (var i = start; i <= end; i ++)
        arr.push(i);
    } return arr;
  }

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let nums = 0;
  for (let value of array) {
    nums += value;
  }
  return nums;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let empty = []
for(let i = array.length - 1; i >= 0; i--){
  empty.push(array[i])
}
return empty
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
return array.reverse()
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;

  for(let i = array.length - 1; i >= 0; i--){
    rest = {value: array[i], rest: rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, def=[]) {
  //base
if(list === null) return def;
  //recusrion
  def.push(list.value);
  return listToArray(list.rest, def)
}


////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if (!list) return undefined;
  else if (n == 0) return list.value;
  else return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
//determine if a & b are both not objects
if(typeof x !== 'object' && typeof y !== 'object') return x===y;
//determine if either x or y are objects
if(typeof x !== 'object' || typeof y !== 'object') return false;
let xKeys = Object.keys(x);
let yKeys = Object.keys(y);
//determine if the lengths are NOT equal
if(xKeys.length !== yKeys.length) return false;
//iterate through the one of the object's arrays
for(let i = 0; i < xKeys.length; i++){
  if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
    return false;
    }
  }
  return true
}
//   if (a === b) return true;
//   if (a == null || typeof a != "object" || b == null || typeof b != "object") return false;
//   let keysA = Object.keys(a), keysB = Object.keys(b);
//   if (keysA.length != keysB.length) return false;
//   for (let key of keysA) {
//     if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false;
//   }
//   return true;
// }

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
